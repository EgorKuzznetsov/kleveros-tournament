// server/index.js
import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import fs from "fs/promises";
import dotenv from "dotenv";
import rateLimit from "express-rate-limit";
dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// ===== –õ–û–ì–ò –°–¢–ê–†–¢–ê =====
console.log("KEY:", (process.env.CHALLONGE_API_KEY || "").slice(0, 6) + "...");
console.log("TOURNEY:", process.env.CHALLONGE_TOURNEY);

// ===== Rate limit: –Ω–µ –±–æ–ª–µ–µ 3 –∑–∞—è–≤–æ–∫ –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP =====
const registerLimiter = rateLimit({
  windowMs: 60 * 1000,
  max: 3,
  standardHeaders: true,
  legacyHeaders: false,
  message: { ok: false, error: "Too many requests. Try again later." },
});
app.use("/api/register", registerLimiter);

// ===== –•–µ–ª–ø–µ—Ä—ã (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è) =====
function cleanStr(s = "") {
  return String(s || "").trim().replace(/\s+/g, " ");
}
function hasUrl(s = "") {
  return /(https?:\/\/|t\.me\/|@everyone|@here)/i.test(s);
}
function tooManyRepeats(s = "") {
  return /(.)\1{3,}/i.test(s); // aaaa, !!!! –∏ —Ç.–¥.
}
function isBadInput(s = "") {
  const v = cleanStr(s);
  if (!v) return true;
  if (v.length > 40) return true;
  if (hasUrl(v)) return true;
  if (tooManyRepeats(v)) return true;
  return false;
}
function escapeHtml(s = "") {
  return String(s)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

// –ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å-–∫—É–ª–¥–∞—É–Ω –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É (telegram/email/ip)
const lastByContact = new Map(); // key -> timestamp
function tooSoon(contact, ms = 30_000) {
  const now = Date.now();
  const t = lastByContact.get(contact) || 0;
  const ok = now - t > ms;
  if (ok) lastByContact.set(contact, now);
  return !ok;
}

// ===== –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: hCaptcha-–ø—Ä–æ–≤–µ—Ä–∫–∞ =====
// –¥–æ–±–∞–≤—å HCAPTCHA_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å
async function verifyHCaptcha(token) {
  const secret = process.env.HCAPTCHA_SECRET;
  if (!secret) return true; // –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (!token) return false;
  const resp = await fetch("https://hcaptcha.com/siteverify", {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: new URLSearchParams({ secret, response: token }),
  });
  const data = await resp.json();
  return !!data.success;
}

// ===== –°–ª—É–∂–µ–±–Ω—ã–π =====
app.get("/", (_, res) => res.send("API ok"));

// ===== Challonge API =====
async function addTeamToChallonge({ teamName, misc }) {
  const tourney = process.env.CHALLONGE_TOURNEY;
  const key = process.env.CHALLONGE_API_KEY;
  if (!key) throw new Error("CHALLONGE_API_KEY is missing");
  if (!tourney) throw new Error("CHALLONGE_TOURNEY is missing");

  const url = `https://api.challonge.com/v1/tournaments/${tourney}/participants.json?api_key=${key}`;
  const resp = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json", Accept: "application/json" },
    // –í participant –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º email ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "Pending invitation"
    body: JSON.stringify({ participant: { name: teamName, misc } }),
  });

  if (!resp.ok) {
    const text = await resp.text();
    throw new Error(`Challonge API error ${resp.status}: ${text}`);
  }
  return await resp.json();
}

// ===== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram =====
async function notifyTelegram(text) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  if (!token || !chatId) {
    console.warn("Telegram env not set");
    return;
  }
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const resp = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: "HTML" }),
  });
  const t = await resp.text();
  console.log("Telegram resp:", resp.status, t);
}

// ===== –¢–µ—Å—Ç —Ä—É—á–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—É =====
app.get("/api/test-telegram", async (req, res) => {
  try {
    await notifyTelegram(req.query.text || "Test from server");
    res.json({ ok: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: String(e) });
  }
});

// ===== –°–æ–ª–æ-–∑–∞—è–≤–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (–¥–ª—è —Ä—É—á–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥) =====
async function saveSoloRequest(data) {
  const path = "./solo_queue.json";
  let curr = [];
  try {
    const raw = await fs.readFile(path, "utf8");
    curr = JSON.parse(raw);
  } catch {
    /* —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –æ–∫ */
  }
  curr.push({ ...data, createdAt: new Date().toISOString() });
  await fs.writeFile(path, JSON.stringify(curr, null, 2), "utf8");
}

// ======== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ========
app.post("/api/register", async (req, res) => {
  try {
    const {
      join_type, // 'team' | 'solo'
      format, // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞ —Å —Ñ–æ—Ä–º—ã
      team_or_nick, // –∏–Ω–æ–≥–¥–∞ —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç —ç—Ç–æ –ø–æ–ª–µ
      team_name,
      player_nick,
      roster_text,
      captain_instagram,
      messenger,
      email,
      phone,
      mmr,
      // hCaptcha
      "h-captcha-response": hCaptchaToken,
      // honeypot
      honeypot,
    } = req.body;

    // ===== Honeypot: –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø–æ–ª–Ω–∏–ª —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ ‚Äî –æ—Ç–±–æ–π
    if (honeypot) {
      return res.status(400).json({ ok: false, error: "Spam detected" });
    }

    // ===== hCaptcha (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const captchaOk = await verifyHCaptcha(hCaptchaToken);
    if (!captchaOk) {
      return res.status(400).json({ ok: false, error: "Captcha failed" });
    }

    // ===== –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è
    const joinType = (join_type || "").toLowerCase();
    const nick = cleanStr(player_nick);
    const team = cleanStr(team_or_nick || team_name);
    const tg = cleanStr(messenger);
    const mail = cleanStr(email);

    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω: 1 –∑–∞—è–≤–∫–∞ / 30 —Å–µ–∫ —Å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∏–ª–∏ IP)
    const cooldownKey = tg || mail || req.ip;
    if (tooSoon(cooldownKey, 30_000)) {
      return res
        .status(429)
        .json({ ok: false, error: "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ." });
    }

    if (joinType === "solo") {
      if (isBadInput(nick))
        return res.status(400).json({ ok: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω—ñ–∫" });
      if (!tg || tg.length < 3 || tg.length > 50)
        return res
          .status(400)
          .json({ ok: false, error: "–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram" });
      const mmrNum = Number(mmr);
      if (!Number.isFinite(mmrNum) || mmrNum < 0 || mmrNum > 15000) {
        return res.status(400).json({ ok: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π MMR" });
      }
    } else {
      // team
      if (isBadInput(team))
        return res
          .status(400)
          .json({ ok: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏" });
      if (isBadInput(nick))
        return res
          .status(400)
          .json({ ok: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω—ñ–∫ –∫–∞–ø—ñ—Ç–∞–Ω–∞" });
      if (!tg || tg.length < 3 || tg.length > 50)
        return res
          .status(400)
          .json({ ok: false, error: "–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram" });
      if ((roster_text || "").length > 500)
        return res
          .status(400)
          .json({ ok: false, error: "–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—É" });
    }

    // ===== –î–ê–õ–ï–ï ‚Äî –ë–û–ï–í–ê–Ø –õ–û–ì–ò–ö–ê =====
    if (joinType === "team") {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Challonge (–±–µ–∑ email -> –Ω–µ –±—É–¥–µ—Ç "invitation pending")
      const misc = JSON.stringify({
        format,
        captain_instagram,
        messenger: tg,
        phone,
        roster: cleanStr(roster_text || ""),
      });

      const added = await addTeamToChallonge({
        teamName: team,
        misc,
      });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—É
      await notifyTelegram(
        `üü¢ <b>–ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞</b>\n` +
          `–ö–æ–º–∞–Ω–¥–∞: <b>${escapeHtml(team)}</b>\n` +
          `–ö–∞–ø—ñ—Ç–∞–Ω: ${escapeHtml(nick)}\n` +
          `–Ü–Ω—Å—Ç: ${escapeHtml(captain_instagram || "-")}\n` +
          `TG: ${escapeHtml(tg || "-")}${phone ? "  –¢–µ–ª: " + escapeHtml(phone) : ""}\n` +
          (roster_text
            ? `–°–∫–ª–∞–¥: ${escapeHtml(cleanStr(roster_text))}`
            : "")
      );

      return res.json({ ok: true, participant: added });
    } else {
      // SOLO: –≤ –æ—á–µ—Ä–µ–¥—å + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ —Å–µ—Ç–∫—É –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º)
      const payload = {
        nick,
        instagram: captain_instagram,
        messenger: tg,
        email: mail,
        phone,
        mmr: mmr ? Number(mmr) : null,
      };

      await saveSoloRequest(payload);

      await notifyTelegram(
        `üü° <b>–°–æ–ª–æ-–∑–∞—è–≤–∫–∞</b>\n` +
          `–ù—ñ–∫: <b>${escapeHtml(nick)}</b>\n` +
          `MMR: ${payload.mmr ?? "-"}\n` +
          `TG: ${escapeHtml(tg || "-")}\n` +
          `Email: ${escapeHtml(mail || "-")}  –¢–µ–ª: ${escapeHtml(phone || "-")}`
      );

      return res.json({ ok: true, queued: true });
    }
  } catch (e) {
    console.error(e);
    return res.status(400).json({ ok: false, error: e.message });
  }
});

// ===== –°–¢–ê–†–¢ =====
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`API running on http://localhost:${PORT}`));
